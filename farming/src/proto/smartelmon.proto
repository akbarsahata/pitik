syntax = "proto3";
package smartelmon;

//option go_package = "pitik.id/pb";

import "proto/commoniot.proto";

/*** ELECTRICAL MONITOR ***/

message ElmonContent {
    bytes             meta = 1;

    // from common
    InfoDevice        infoDevice = 2;
    InfoFarm          infoFarm = 3;
    StartCycle        startCycle = 4;
    StopCycle         stopCycle = 5;
    Reset             reset = 6;
    Ping              ping = 7;
    Ota               ota = 8;
    ReportSetting     reportSetting = 9;

    // specific to controller
    ElmonData    elmonData = 10;
    ElmonStatus  elmonStatus = 11;
    ElmonSetting elmonSetting = 12;

    // only for get data
    Error  error = 50;   // error code and message if any
}

// set/get settings
// send once after power up or reset
message ElmonSetting{
    VoltParams voltParams = 1;
    uint32 pfParams = 2;
}

// get data, periodic report
message ElmonData{
    Voltage voltage = 1;
    Current current = 2;
    Power power = 3;
    Frequency freq = 4;
    THDVoltage thdVolt = 5;
    THDCurrent thdCurr = 6;
    uint32 wifiRssi = 7;
    Energy energy = 8;
    Angle angle = 9;
    uint32 powerSource = 10;
}

// get status and alert
message ElmonStatus{
    uint32 underVoltage = 1; // underVolt : 1 Below Setting 1 , 2 Below Setting 2
    uint32 overVoltage = 2; // OverVOLT : 1 Above Setting 1 , 2 Above Setting 2
    uint32 underPF = 3;
    uint32 phaseSequence = 4;
    uint32 onePhaseFailure = 5;
    uint32 rtc = 6;
    uint32 sdcard = 7;
    uint32 modbus = 8;
    uint32 powerOff = 9;
    uint32 buttonRst = 10;

    // only for alert
    uint32 priority = 30; // 1: low, 2: medium, 3: high
}

//general Voltage Data
message Voltage {
    uint32 AN = 1;
    uint32 BN = 2;
    uint32 CN = 3;
    uint32 AB = 4;
    uint32 BC = 5;
    uint32 CA = 6;
}

//general Current Data 
message Current {
    uint32 A = 1;
    uint32 B = 2;
    uint32 C = 3; 
}

//General Power Data
message Power {
    uint32 activeA = 1;
    uint32 activeB = 2;
    uint32 activeC = 3;
    uint32 activeTotal = 4;
    uint32 reactiveA = 5;
    uint32 reactiveB = 6;
    uint32 reactiveC = 7;
    uint32 reactiveTotal = 8;
    uint32 pfA = 9;
    uint32 pfB = 10;
    uint32 pfC = 11;
    uint32 pfTotal = 12;
    uint32 apparentA = 13;
    uint32 apparentB = 14;
    uint32 apparentC = 15;
    uint32 apparentTotal = 16;
}

//General Frequency Data
message Frequency {
    uint32 freq = 1;  // Satuan Hz
}

//General THD Volt
message THDVoltage{
    uint32 AN = 1;
    uint32 BN = 2;
    uint32 CN = 3;
}

//general THD Arus
message THDCurrent{
    uint32 A = 1;
    uint32 B = 2;
    uint32 C = 3;
}

// for alert
message VoltParams{
    uint32 underVoltage1 = 1; //default 5%
    uint32 underVoltage2 = 2; //default 15%
    uint32 overVoltage1 = 3;  // Default 5%
    uint32 overVoltage2 = 4; // default 15%
}

message Angle 
{
    uint32 phaseA = 1; // Satuan Derajat
    uint32 phaseB = 2; // Satuan Derajat
    uint32 phaseC = 3; // Satuan Derajat
}

message Energy {
    uint32 absorptiveActive = 1; // absortive merupakah perumpaan dari KWH dari AMC
    uint32 releaseActive = 2; // Beban Resistiv dari kwh
    uint32 inductiveReactive = 3; // beban indutif dari kwh
    uint32 capasitiveReactive = 4; // beban capasitif dari kwh
}
