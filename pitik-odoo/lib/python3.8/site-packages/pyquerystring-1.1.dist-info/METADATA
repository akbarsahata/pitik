Metadata-Version: 2.1
Name: pyquerystring
Version: 1.1
Summary: Query String Parsing The Way It Should Be
Home-page: http://github.com/aventurella/pyquerystring
Author: Adam Venturella
Author-email: aventurella@gmail.com
License: Fancy query string parsing & application/x-www-form-urlencoded parsing
        
        Copyright 2011-2016 Adam Venturella
        
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
        
           http://www.apache.org/licenses/LICENSE-2.0
        
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
License-File: LICENSE

Python's default urlparse.parse_qs() does not understand the concept of data structures. While this works for simple querystrings, anything more complex returns a less than desirable result.

This library will intelligently parse complex querystrings that python's library is unable to handle such as the following:

mylist[]=item0&mylist[]=item1

mylist[0]=item0&mylist[1]=item1

mylist[0][0]=subitem0&mylist[0][1]=subitem1

mylist.element=item0

mylist.element[0]=item0&mylist.element[1]=item0
